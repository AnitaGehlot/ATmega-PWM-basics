
POT_PWM_Motor.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000336  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000060  00000000  00000000  0000038a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 000000d6  00000000  00000000  000003ea  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   0000084a  00000000  00000000  000004c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000326  00000000  00000000  00000d0a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000657  00000000  00000000  00001030  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000f0  00000000  00000000  00001688  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000001a8  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000030e  00000000  00000000  00001920  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000078  00000000  00000000  00001c2e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 42 00 	call	0x84	; 0x84 <main>
  64:	0c 94 99 01 	jmp	0x332	; 0x332 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <InitPWM>:
#include <util/delay.h>
#include "lcd.h"

void InitPWM()
{
	TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
  6c:	83 b7       	in	r24, 0x33	; 51
  6e:	89 66       	ori	r24, 0x69	; 105
  70:	83 bf       	out	0x33, r24	; 51

	
	DDRB|=(1<<PB3);//Set OC0 PIN as output. It is  PB3 on ATmega16 ATmega32
  72:	bb 9a       	sbi	0x17, 3	; 23
}
  74:	08 95       	ret

00000076 <SetPWMOutput>:

void SetPWMOutput(uint8_t duty)// Sets the duty cycle of output. 
{
	OCR0=duty;
  76:	8c bf       	out	0x3c, r24	; 60
}
  78:	08 95       	ret

0000007a <Wait>:
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  7a:	80 e8       	ldi	r24, 0x80	; 128
  7c:	9c e0       	ldi	r25, 0x0C	; 12
  7e:	01 97       	sbiw	r24, 0x01	; 1
  80:	f1 f7       	brne	.-4      	; 0x7e <Wait+0x4>


void Wait()
{
 _delay_loop_2(3200);
}
  82:	08 95       	ret

00000084 <main>:

void main()
{
  84:	1f 93       	push	r17
  86:	cf 93       	push	r28
  88:	df 93       	push	r29
	uint8_t speed=0;
	InitLCD(0);
  8a:	80 e0       	ldi	r24, 0x00	; 0
  8c:	0e 94 d2 00 	call	0x1a4	; 0x1a4 <InitLCD>
#include <util/delay.h>
#include "lcd.h"

void InitPWM()
{
	TCCR0|=(1<<WGM00)|(1<<WGM01)|(1<<COM01)|(1<<CS00);
  90:	83 b7       	in	r24, 0x33	; 51
  92:	89 66       	ori	r24, 0x69	; 105
  94:	83 bf       	out	0x33, r24	; 51

	
	DDRB|=(1<<PB3);//Set OC0 PIN as output. It is  PB3 on ATmega16 ATmega32
  96:	bb 9a       	sbi	0x17, 3	; 23
void main()
{
	uint8_t speed=0;
	InitLCD(0);
	InitPWM();//Initialize PWM Channel 0
	InitADC();//ADC initialization
  98:	0e 94 6a 00 	call	0xd4	; 0xd4 <InitADC>
	LCDClear();
  9c:	81 e0       	ldi	r24, 0x01	; 1
  9e:	90 e0       	ldi	r25, 0x00	; 0
  a0:	60 e0       	ldi	r22, 0x00	; 0
  a2:	70 e0       	ldi	r23, 0x00	; 0
  a4:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>
  a8:	c0 e8       	ldi	r28, 0x80	; 128
  aa:	dc e0       	ldi	r29, 0x0C	; 12
	while(1)//Do this forever
	{
		speed=ReadADC(0);// Read ADC channel 0	
  ac:	80 e0       	ldi	r24, 0x00	; 0
  ae:	90 e0       	ldi	r25, 0x00	; 0
  b0:	0e 94 6f 00 	call	0xde	; 0xde <ReadADC>
  b4:	18 2f       	mov	r17, r24
	DDRB|=(1<<PB3);//Set OC0 PIN as output. It is  PB3 on ATmega16 ATmega32
}

void SetPWMOutput(uint8_t duty)// Sets the duty cycle of output. 
{
	OCR0=duty;
  b6:	8c bf       	out	0x3c, r24	; 60
	LCDClear();
	while(1)//Do this forever
	{
		speed=ReadADC(0);// Read ADC channel 0	
		SetPWMOutput(speed);//Now Set The speed using PWM
		LCDWriteIntXY(0,0,speed,3)// print speed on LCD
  b8:	80 e0       	ldi	r24, 0x00	; 0
  ba:	60 e0       	ldi	r22, 0x00	; 0
  bc:	0e 94 69 01 	call	0x2d2	; 0x2d2 <LCDGotoXY>
  c0:	81 2f       	mov	r24, r17
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	63 e0       	ldi	r22, 0x03	; 3
  c6:	70 e0       	ldi	r23, 0x00	; 0
  c8:	0e 94 0b 01 	call	0x216	; 0x216 <LCDWriteInt>
  cc:	ce 01       	movw	r24, r28
  ce:	01 97       	sbiw	r24, 0x01	; 1
  d0:	f1 f7       	brne	.-4      	; 0xce <main+0x4a>
  d2:	ec cf       	rjmp	.-40     	; 0xac <main+0x28>

000000d4 <InitADC>:
#include "lcd.h"


void InitADC()
  {
    ADMUX=(1<<REFS0);// For Aref=AVcc;
  d4:	80 e4       	ldi	r24, 0x40	; 64
  d6:	87 b9       	out	0x07, r24	; 7
    ADCSRA=(1<<ADEN)|(7<<ADPS0);
  d8:	87 e8       	ldi	r24, 0x87	; 135
  da:	86 b9       	out	0x06, r24	; 6
   }
  dc:	08 95       	ret

000000de <ReadADC>:

uint16_t ReadADC(uint8_t ch)
   {
	//Select ADC Channel ch must be 0-7
	ADMUX&=~(1<<0);
  de:	38 98       	cbi	0x07, 0	; 7
	ADMUX&=~(1<<1);
  e0:	39 98       	cbi	0x07, 1	; 7
	ADMUX&=~(1<<2);
  e2:	3a 98       	cbi	0x07, 2	; 7
	ADMUX&=~(1<<3);
  e4:	3b 98       	cbi	0x07, 3	; 7
	ADMUX&=~(1<<4);
  e6:	3c 98       	cbi	0x07, 4	; 7
	ch=ch&0b00011111;
	ADMUX|=ch;
  e8:	97 b1       	in	r25, 0x07	; 7
  ea:	8f 71       	andi	r24, 0x1F	; 31
  ec:	89 2b       	or	r24, r25
  ee:	87 b9       	out	0x07, r24	; 7
	
	//Start Single conversion
	ADCSRA|=(1<<ADSC);
  f0:	36 9a       	sbi	0x06, 6	; 6

	//Wait for conversion to complete
	while(!(ADCSRA & (1<<ADIF)));
  f2:	34 9b       	sbis	0x06, 4	; 6
  f4:	fe cf       	rjmp	.-4      	; 0xf2 <ReadADC+0x14>

	//Clear ADIF by writing one to it
	ADCSRA|=(1<<ADIF);
  f6:	34 9a       	sbi	0x06, 4	; 6

	return(ADC);
  f8:	24 b1       	in	r18, 0x04	; 4
  fa:	35 b1       	in	r19, 0x05	; 5
   }
  fc:	c9 01       	movw	r24, r18
  fe:	08 95       	ret

00000100 <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 100:	84 b3       	in	r24, 0x14	; 20
 102:	80 7f       	andi	r24, 0xF0	; 240
 104:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 106:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
 108:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 10a:	81 e0       	ldi	r24, 0x01	; 1
 10c:	8a 95       	dec	r24
 10e:	f1 f7       	brne	.-4      	; 0x10c <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 110:	21 e0       	ldi	r18, 0x01	; 1
 112:	97 9a       	sbi	0x12, 7	; 18
 114:	82 2f       	mov	r24, r18
 116:	8a 95       	dec	r24
 118:	f1 f7       	brne	.-4      	; 0x116 <LCDBusyLoop+0x16>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 11a:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 11c:	82 95       	swap	r24
 11e:	80 7f       	andi	r24, 0xF0	; 240
 120:	92 2f       	mov	r25, r18
 122:	9a 95       	dec	r25
 124:	f1 f7       	brne	.-4      	; 0x122 <LCDBusyLoop+0x22>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 126:	97 98       	cbi	0x12, 7	; 18
 128:	92 2f       	mov	r25, r18
 12a:	9a 95       	dec	r25
 12c:	f1 f7       	brne	.-4      	; 0x12a <LCDBusyLoop+0x2a>
		_delay_us(1);	//tEL

		SET_E();
 12e:	97 9a       	sbi	0x12, 7	; 18
 130:	92 2f       	mov	r25, r18
 132:	9a 95       	dec	r25
 134:	f1 f7       	brne	.-4      	; 0x132 <LCDBusyLoop+0x32>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 136:	93 b3       	in	r25, 0x13	; 19
 138:	92 2f       	mov	r25, r18
 13a:	9a 95       	dec	r25
 13c:	f1 f7       	brne	.-4      	; 0x13a <LCDBusyLoop+0x3a>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 13e:	97 98       	cbi	0x12, 7	; 18
 140:	92 2f       	mov	r25, r18
 142:	9a 95       	dec	r25
 144:	f1 f7       	brne	.-4      	; 0x142 <LCDBusyLoop+0x42>
		_delay_us(1);	//tEL
	}while(busy);
 146:	87 fd       	sbrc	r24, 7
 148:	e4 cf       	rjmp	.-56     	; 0x112 <LCDBusyLoop+0x12>

	CLEAR_RW();		//write mode
 14a:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 14c:	84 b3       	in	r24, 0x14	; 20
 14e:	8f 60       	ori	r24, 0x0F	; 15
 150:	84 bb       	out	0x14, r24	; 20

}
 152:	08 95       	ret

00000154 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 154:	38 2f       	mov	r19, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 156:	66 23       	and	r22, r22
 158:	11 f4       	brne	.+4      	; 0x15e <LCDByte+0xa>
	CLEAR_RS();
 15a:	96 98       	cbi	0x12, 6	; 18
 15c:	01 c0       	rjmp	.+2      	; 0x160 <LCDByte+0xc>
else
	SET_RS();
 15e:	96 9a       	sbi	0x12, 6	; 18
 160:	21 e0       	ldi	r18, 0x01	; 1
 162:	82 2f       	mov	r24, r18
 164:	8a 95       	dec	r24
 166:	f1 f7       	brne	.-4      	; 0x164 <LCDByte+0x10>

_delay_us(0.500);		//tAS

SET_E();
 168:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 16a:	85 b3       	in	r24, 0x15	; 21
 16c:	93 2f       	mov	r25, r19
 16e:	92 95       	swap	r25
 170:	9f 70       	andi	r25, 0x0F	; 15
 172:	80 7f       	andi	r24, 0xF0	; 240
 174:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 176:	95 bb       	out	0x15, r25	; 21
 178:	82 2f       	mov	r24, r18
 17a:	8a 95       	dec	r24
 17c:	f1 f7       	brne	.-4      	; 0x17a <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 17e:	97 98       	cbi	0x12, 7	; 18
 180:	82 2f       	mov	r24, r18
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 186:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 188:	85 b3       	in	r24, 0x15	; 21
 18a:	3f 70       	andi	r19, 0x0F	; 15
 18c:	80 7f       	andi	r24, 0xF0	; 240
 18e:	83 2b       	or	r24, r19

LCD_DATA_PORT=temp;
 190:	85 bb       	out	0x15, r24	; 21
 192:	82 2f       	mov	r24, r18
 194:	8a 95       	dec	r24
 196:	f1 f7       	brne	.-4      	; 0x194 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 198:	97 98       	cbi	0x12, 7	; 18
 19a:	2a 95       	dec	r18
 19c:	f1 f7       	brne	.-4      	; 0x19a <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 19e:	0e 94 80 00 	call	0x100	; 0x100 <LCDBusyLoop>
}
 1a2:	08 95       	ret

000001a4 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1a4:	1f 93       	push	r17
 1a6:	18 2f       	mov	r17, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1a8:	8b e3       	ldi	r24, 0x3B	; 59
 1aa:	9b e2       	ldi	r25, 0x2B	; 43
 1ac:	01 97       	sbiw	r24, 0x01	; 1
 1ae:	f1 f7       	brne	.-4      	; 0x1ac <InitLCD+0x8>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1b0:	84 b3       	in	r24, 0x14	; 20
 1b2:	8f 60       	ori	r24, 0x0F	; 15
 1b4:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 1b6:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1b8:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1ba:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 1bc:	85 b3       	in	r24, 0x15	; 21
 1be:	80 7f       	andi	r24, 0xF0	; 240
 1c0:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 1c2:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 1c4:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 1c6:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	98 2f       	mov	r25, r24
 1cc:	9a 95       	dec	r25
 1ce:	f1 f7       	brne	.-4      	; 0x1cc <InitLCD+0x28>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 1d0:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1d2:	a9 9a       	sbi	0x15, 1	; 21
 1d4:	98 2f       	mov	r25, r24
 1d6:	9a 95       	dec	r25
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <InitLCD+0x32>
	_delay_us(1);
	CLEAR_E();
 1da:	97 98       	cbi	0x12, 7	; 18
 1dc:	8a 95       	dec	r24
 1de:	f1 f7       	brne	.-4      	; 0x1dc <InitLCD+0x38>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 1e0:	0e 94 80 00 	call	0x100	; 0x100 <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 1e4:	81 2f       	mov	r24, r17
 1e6:	8c 60       	ori	r24, 0x0C	; 12
 1e8:	60 e0       	ldi	r22, 0x00	; 0
 1ea:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 1ee:	88 e2       	ldi	r24, 0x28	; 40
 1f0:	60 e0       	ldi	r22, 0x00	; 0
 1f2:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>
}
 1f6:	1f 91       	pop	r17
 1f8:	08 95       	ret

000001fa <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 1fa:	cf 93       	push	r28
 1fc:	df 93       	push	r29
 1fe:	ec 01       	movw	r28, r24
 200:	04 c0       	rjmp	.+8      	; 0x20a <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 202:	61 e0       	ldi	r22, 0x01	; 1
 204:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>
	msg++;
 208:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 20a:	88 81       	ld	r24, Y
 20c:	88 23       	and	r24, r24
 20e:	c9 f7       	brne	.-14     	; 0x202 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 210:	df 91       	pop	r29
 212:	cf 91       	pop	r28
 214:	08 95       	ret

00000216 <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 216:	ef 92       	push	r14
 218:	ff 92       	push	r15
 21a:	0f 93       	push	r16
 21c:	1f 93       	push	r17
 21e:	df 93       	push	r29
 220:	cf 93       	push	r28
 222:	00 d0       	rcall	.+0      	; 0x224 <LCDWriteInt+0xe>
 224:	00 d0       	rcall	.+0      	; 0x226 <LCDWriteInt+0x10>
 226:	0f 92       	push	r0
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
 22c:	9c 01       	movw	r18, r24
 22e:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 230:	fe 01       	movw	r30, r28
 232:	31 96       	adiw	r30, 0x01	; 1
 234:	85 e0       	ldi	r24, 0x05	; 5
 236:	df 01       	movw	r26, r30
 238:	1d 92       	st	X+, r1
 23a:	8a 95       	dec	r24
 23c:	e9 f7       	brne	.-6      	; 0x238 <LCDWriteInt+0x22>
 23e:	fe 01       	movw	r30, r28
 240:	35 96       	adiw	r30, 0x05	; 5
 242:	0d c0       	rjmp	.+26     	; 0x25e <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 244:	c9 01       	movw	r24, r18
 246:	6a e0       	ldi	r22, 0x0A	; 10
 248:	70 e0       	ldi	r23, 0x00	; 0
 24a:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 24e:	80 83       	st	Z, r24
	val=val/10;
 250:	c9 01       	movw	r24, r18
 252:	6a e0       	ldi	r22, 0x0A	; 10
 254:	70 e0       	ldi	r23, 0x00	; 0
 256:	0e 94 72 01 	call	0x2e4	; 0x2e4 <__divmodhi4>
 25a:	9b 01       	movw	r18, r22
 25c:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 25e:	21 15       	cp	r18, r1
 260:	31 05       	cpc	r19, r1
 262:	81 f7       	brne	.-32     	; 0x244 <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 264:	bf ef       	ldi	r27, 0xFF	; 255
 266:	0f 3f       	cpi	r16, 0xFF	; 255
 268:	1b 07       	cpc	r17, r27
 26a:	79 f4       	brne	.+30     	; 0x28a <LCDWriteInt+0x74>
 26c:	20 e0       	ldi	r18, 0x00	; 0
 26e:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 270:	ae 01       	movw	r20, r28
 272:	4f 5f       	subi	r20, 0xFF	; 255
 274:	5f 4f       	sbci	r21, 0xFF	; 255
 276:	02 c0       	rjmp	.+4      	; 0x27c <LCDWriteInt+0x66>
 278:	2f 5f       	subi	r18, 0xFF	; 255
 27a:	3f 4f       	sbci	r19, 0xFF	; 255
 27c:	fa 01       	movw	r30, r20
 27e:	e2 0f       	add	r30, r18
 280:	f3 1f       	adc	r31, r19
 282:	80 81       	ld	r24, Z
 284:	88 23       	and	r24, r24
 286:	c1 f3       	breq	.-16     	; 0x278 <LCDWriteInt+0x62>
 288:	04 c0       	rjmp	.+8      	; 0x292 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 28a:	25 e0       	ldi	r18, 0x05	; 5
 28c:	30 e0       	ldi	r19, 0x00	; 0
 28e:	20 1b       	sub	r18, r16
 290:	31 0b       	sbc	r19, r17
 292:	7e 01       	movw	r14, r28
 294:	08 94       	sec
 296:	e1 1c       	adc	r14, r1
 298:	f1 1c       	adc	r15, r1
 29a:	e2 0e       	add	r14, r18
 29c:	f3 1e       	adc	r15, r19
 29e:	89 01       	movw	r16, r18
 2a0:	09 c0       	rjmp	.+18     	; 0x2b4 <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2a2:	f7 01       	movw	r30, r14
 2a4:	81 91       	ld	r24, Z+
 2a6:	7f 01       	movw	r14, r30
 2a8:	80 5d       	subi	r24, 0xD0	; 208
 2aa:	61 e0       	ldi	r22, 0x01	; 1
 2ac:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2b0:	0f 5f       	subi	r16, 0xFF	; 255
 2b2:	1f 4f       	sbci	r17, 0xFF	; 255
 2b4:	05 30       	cpi	r16, 0x05	; 5
 2b6:	11 05       	cpc	r17, r1
 2b8:	a4 f3       	brlt	.-24     	; 0x2a2 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 2ba:	0f 90       	pop	r0
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	cf 91       	pop	r28
 2c6:	df 91       	pop	r29
 2c8:	1f 91       	pop	r17
 2ca:	0f 91       	pop	r16
 2cc:	ff 90       	pop	r15
 2ce:	ef 90       	pop	r14
 2d0:	08 95       	ret

000002d2 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 2d2:	88 32       	cpi	r24, 0x28	; 40
 2d4:	30 f4       	brcc	.+12     	; 0x2e2 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 2d6:	61 11       	cpse	r22, r1
 2d8:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 2da:	80 68       	ori	r24, 0x80	; 128
 2dc:	60 e0       	ldi	r22, 0x00	; 0
 2de:	0e 94 aa 00 	call	0x154	; 0x154 <LCDByte>
 2e2:	08 95       	ret

000002e4 <__divmodhi4>:
 2e4:	97 fb       	bst	r25, 7
 2e6:	09 2e       	mov	r0, r25
 2e8:	07 26       	eor	r0, r23
 2ea:	0a d0       	rcall	.+20     	; 0x300 <__divmodhi4_neg1>
 2ec:	77 fd       	sbrc	r23, 7
 2ee:	04 d0       	rcall	.+8      	; 0x2f8 <__divmodhi4_neg2>
 2f0:	0c d0       	rcall	.+24     	; 0x30a <__udivmodhi4>
 2f2:	06 d0       	rcall	.+12     	; 0x300 <__divmodhi4_neg1>
 2f4:	00 20       	and	r0, r0
 2f6:	1a f4       	brpl	.+6      	; 0x2fe <__divmodhi4_exit>

000002f8 <__divmodhi4_neg2>:
 2f8:	70 95       	com	r23
 2fa:	61 95       	neg	r22
 2fc:	7f 4f       	sbci	r23, 0xFF	; 255

000002fe <__divmodhi4_exit>:
 2fe:	08 95       	ret

00000300 <__divmodhi4_neg1>:
 300:	f6 f7       	brtc	.-4      	; 0x2fe <__divmodhi4_exit>
 302:	90 95       	com	r25
 304:	81 95       	neg	r24
 306:	9f 4f       	sbci	r25, 0xFF	; 255
 308:	08 95       	ret

0000030a <__udivmodhi4>:
 30a:	aa 1b       	sub	r26, r26
 30c:	bb 1b       	sub	r27, r27
 30e:	51 e1       	ldi	r21, 0x11	; 17
 310:	07 c0       	rjmp	.+14     	; 0x320 <__udivmodhi4_ep>

00000312 <__udivmodhi4_loop>:
 312:	aa 1f       	adc	r26, r26
 314:	bb 1f       	adc	r27, r27
 316:	a6 17       	cp	r26, r22
 318:	b7 07       	cpc	r27, r23
 31a:	10 f0       	brcs	.+4      	; 0x320 <__udivmodhi4_ep>
 31c:	a6 1b       	sub	r26, r22
 31e:	b7 0b       	sbc	r27, r23

00000320 <__udivmodhi4_ep>:
 320:	88 1f       	adc	r24, r24
 322:	99 1f       	adc	r25, r25
 324:	5a 95       	dec	r21
 326:	a9 f7       	brne	.-22     	; 0x312 <__udivmodhi4_loop>
 328:	80 95       	com	r24
 32a:	90 95       	com	r25
 32c:	bc 01       	movw	r22, r24
 32e:	cd 01       	movw	r24, r26
 330:	08 95       	ret

00000332 <_exit>:
 332:	f8 94       	cli

00000334 <__stop_program>:
 334:	ff cf       	rjmp	.-2      	; 0x334 <__stop_program>
