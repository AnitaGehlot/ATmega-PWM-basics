
PWM_TIMER.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000035c  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000040  00000000  00000000  000003b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000086  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000789  00000000  00000000  00000476  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 00000294  00000000  00000000  00000bff  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000059f  00000000  00000000  00000e93  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000090  00000000  00000000  00001434  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000162  00000000  00000000  000014c4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00000373  00000000  00000000  00001626  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 000000d8  00000000  00000000  00001999  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 ac 01 	jmp	0x358	; 0x358 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
{
	while ( us ) us--;
}

int main(void)
{
  6c:	ef 92       	push	r14
  6e:	ff 92       	push	r15
  70:	1f 93       	push	r17
  72:	cf 93       	push	r28
  74:	df 93       	push	r29
	InitLCD(0);
  76:	80 e0       	ldi	r24, 0x00	; 0
  78:	0e 94 e0 00 	call	0x1c0	; 0x1c0 <InitLCD>
	LCDClear();
  7c:	81 e0       	ldi	r24, 0x01	; 1
  7e:	90 e0       	ldi	r25, 0x00	; 0
  80:	60 e0       	ldi	r22, 0x00	; 0
  82:	70 e0       	ldi	r23, 0x00	; 0
  84:	0e 94 b8 00 	call	0x170	; 0x170 <LCDByte>
	uint8_t i = 0;
	DDRB  = 0xff;                  // use all pins on PortB for output 
  88:	8f ef       	ldi	r24, 0xFF	; 255
  8a:	87 bb       	out	0x17, r24	; 23
	PORTB = 0x00;                  // set output high -> turn all LEDs off
  8c:	18 ba       	out	0x18, r1	; 24
	// set OC1A pin as output, required for output toggling
	DDRD |= _BV(PD5);
  8e:	8d 9a       	sbi	0x11, 5	; 17
	// enable 8 bit PWM, select inverted PWM
	TCCR1A =  _BV(WGM10) | _BV(COM1A1) | _BV(COM1A0);
  90:	81 ec       	ldi	r24, 0xC1	; 193
  92:	8f bd       	out	0x2f, r24	; 47
	// timer1 running on 1/8 MCU clock with clear timer/counter1 on Compare Match
	// PWM frequency will be MCU clock / 8 / 512, e.g. with 4Mhz Crystal 977 Hz.
	TCCR1B = _BV(CS11) | _BV(WGM12);
  94:	8a e0       	ldi	r24, 0x0A	; 10
  96:	8e bd       	out	0x2e, r24	; 46
  98:	10 e0       	ldi	r17, 0x00	; 0
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  9a:	80 e9       	ldi	r24, 0x90	; 144
  9c:	e8 2e       	mov	r14, r24
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	f8 2e       	mov	r15, r24
  a2:	1a c0       	rjmp	.+52     	; 0xd8 <main+0x6c>
	//for (;;)
	{   
		/* dimm LED on */
		for (i=0; i<255; i++)
		{
			OCR1AL = i;			//Note OCR1AL NOT OCR1A
  a4:	1a bd       	out	0x2a, r17	; 42
			PORTB=i;
  a6:	18 bb       	out	0x18, r17	; 24
			LCDWriteIntXY(0,0,i,3);	//for debugging
  a8:	80 e0       	ldi	r24, 0x00	; 0
  aa:	60 e0       	ldi	r22, 0x00	; 0
  ac:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCDGotoXY>
  b0:	81 2f       	mov	r24, r17
  b2:	90 e0       	ldi	r25, 0x00	; 0
  b4:	63 e0       	ldi	r22, 0x03	; 3
  b6:	70 e0       	ldi	r23, 0x00	; 0
  b8:	0e 94 1e 01 	call	0x23c	; 0x23c <LCDWriteInt>
  bc:	84 ef       	ldi	r24, 0xF4	; 244
  be:	91 e0       	ldi	r25, 0x01	; 1
  c0:	f7 01       	movw	r30, r14
  c2:	31 97       	sbiw	r30, 0x01	; 1
  c4:	f1 f7       	brne	.-4      	; 0xc2 <main+0x56>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
  c6:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
  c8:	d9 f7       	brne	.-10     	; 0xc0 <main+0x54>
			_delay_ms(50);
			//delay(XTAL/100);	//delay 10 ms just to slow things down
			LCDClear();
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	90 e0       	ldi	r25, 0x00	; 0
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	70 e0       	ldi	r23, 0x00	; 0
  d2:	0e 94 b8 00 	call	0x170	; 0x170 <LCDByte>
	TCCR1B = _BV(CS11) | _BV(WGM12);
while(1)
	//for (;;)
	{   
		/* dimm LED on */
		for (i=0; i<255; i++)
  d6:	1f 5f       	subi	r17, 0xFF	; 255
  d8:	1f 3f       	cpi	r17, 0xFF	; 255
  da:	21 f7       	brne	.-56     	; 0xa4 <main+0x38>
  dc:	cf ef       	ldi	r28, 0xFF	; 255
  de:	d0 e0       	ldi	r29, 0x00	; 0
			LCDClear();
		}
		/* dimm LED off */
		for( i=255; i>0; i--)
		{
			OCR1AL = i;         //Note OCR1AL NOT OCR1A   
  e0:	ca bd       	out	0x2a, r28	; 42
			PORTB=i;
  e2:	c8 bb       	out	0x18, r28	; 24
			LCDWriteIntXY(0,1,i,3);				//for debugging
  e4:	80 e0       	ldi	r24, 0x00	; 0
  e6:	61 e0       	ldi	r22, 0x01	; 1
  e8:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <LCDGotoXY>
  ec:	ce 01       	movw	r24, r28
  ee:	63 e0       	ldi	r22, 0x03	; 3
  f0:	70 e0       	ldi	r23, 0x00	; 0
  f2:	0e 94 1e 01 	call	0x23c	; 0x23c <LCDWriteInt>
  f6:	84 ef       	ldi	r24, 0xF4	; 244
  f8:	91 e0       	ldi	r25, 0x01	; 1
  fa:	f7 01       	movw	r30, r14
  fc:	31 97       	sbiw	r30, 0x01	; 1
  fe:	f1 f7       	brne	.-4      	; 0xfc <main+0x90>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 100:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 102:	d9 f7       	brne	.-10     	; 0xfa <main+0x8e>
			_delay_ms(50);
			//delay(XTAL/100);	//delay 10 ms just to slow things down
			LCDClear();
 104:	81 e0       	ldi	r24, 0x01	; 1
 106:	90 e0       	ldi	r25, 0x00	; 0
 108:	60 e0       	ldi	r22, 0x00	; 0
 10a:	70 e0       	ldi	r23, 0x00	; 0
 10c:	0e 94 b8 00 	call	0x170	; 0x170 <LCDByte>
 110:	21 97       	sbiw	r28, 0x01	; 1
			_delay_ms(50);
			//delay(XTAL/100);	//delay 10 ms just to slow things down
			LCDClear();
		}
		/* dimm LED off */
		for( i=255; i>0; i--)
 112:	cc 23       	and	r28, r28
 114:	29 f7       	brne	.-54     	; 0xe0 <main+0x74>
 116:	10 e0       	ldi	r17, 0x00	; 0
 118:	c5 cf       	rjmp	.-118    	; 0xa4 <main+0x38>

0000011a <LCDBusyLoop>:
	//This function waits till lcd is BUSY

	uint8_t busy,status=0x00,temp;

	//Change Port to input type because we are reading data
	LCD_DATA_DDR&=0xF0;
 11a:	84 b3       	in	r24, 0x14	; 20
 11c:	80 7f       	andi	r24, 0xF0	; 240
 11e:	84 bb       	out	0x14, r24	; 20

	//change LCD mode
	SET_RW();		//Read mode
 120:	95 9a       	sbi	0x12, 5	; 18
	CLEAR_RS();		//Read status
 122:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 124:	82 e0       	ldi	r24, 0x02	; 2
 126:	8a 95       	dec	r24
 128:	f1 f7       	brne	.-4      	; 0x126 <LCDBusyLoop+0xc>

	
	do
	{

		SET_E();
 12a:	22 e0       	ldi	r18, 0x02	; 2
 12c:	35 e0       	ldi	r19, 0x05	; 5
 12e:	97 9a       	sbi	0x12, 7	; 18
 130:	82 2f       	mov	r24, r18
 132:	8a 95       	dec	r24
 134:	f1 f7       	brne	.-4      	; 0x132 <LCDBusyLoop+0x18>

		//Wait tDA for data to become available
		_delay_us(0.5);

		status=LCD_DATA_PIN;
 136:	83 b3       	in	r24, 0x13	; 19
		status=status<<4;
 138:	82 95       	swap	r24
 13a:	80 7f       	andi	r24, 0xF0	; 240
 13c:	92 2f       	mov	r25, r18
 13e:	9a 95       	dec	r25
 140:	f1 f7       	brne	.-4      	; 0x13e <LCDBusyLoop+0x24>

		_delay_us(0.5);

		//Pull E low
		CLEAR_E();
 142:	97 98       	cbi	0x12, 7	; 18
 144:	93 2f       	mov	r25, r19
 146:	9a 95       	dec	r25
 148:	f1 f7       	brne	.-4      	; 0x146 <LCDBusyLoop+0x2c>
		_delay_us(1);	//tEL

		SET_E();
 14a:	97 9a       	sbi	0x12, 7	; 18
 14c:	92 2f       	mov	r25, r18
 14e:	9a 95       	dec	r25
 150:	f1 f7       	brne	.-4      	; 0x14e <LCDBusyLoop+0x34>
		_delay_us(0.5);

		temp=LCD_DATA_PIN;
 152:	93 b3       	in	r25, 0x13	; 19
 154:	92 2f       	mov	r25, r18
 156:	9a 95       	dec	r25
 158:	f1 f7       	brne	.-4      	; 0x156 <LCDBusyLoop+0x3c>
		status=status|temp;

		busy=status & 0b10000000;

		_delay_us(0.5);
		CLEAR_E();
 15a:	97 98       	cbi	0x12, 7	; 18
 15c:	93 2f       	mov	r25, r19
 15e:	9a 95       	dec	r25
 160:	f1 f7       	brne	.-4      	; 0x15e <LCDBusyLoop+0x44>
		_delay_us(1);	//tEL
	}while(busy);
 162:	87 fd       	sbrc	r24, 7
 164:	e4 cf       	rjmp	.-56     	; 0x12e <LCDBusyLoop+0x14>

	CLEAR_RW();		//write mode
 166:	95 98       	cbi	0x12, 5	; 18
	//Change Port to output
	LCD_DATA_DDR|=0x0F;
 168:	84 b3       	in	r24, 0x14	; 20
 16a:	8f 60       	ori	r24, 0x0F	; 15
 16c:	84 bb       	out	0x14, r24	; 20

}
 16e:	08 95       	ret

00000170 <LCDByte>:
#define CLEAR_RW() (LCD_RW_PORT&=(~(1<<LCD_RW_POS)))



void LCDByte(uint8_t c,uint8_t isdata)
{
 170:	28 2f       	mov	r18, r24
uint8_t temp;

hn=c>>4;
ln=(c & 0x0F);

if(isdata==0)
 172:	66 23       	and	r22, r22
 174:	11 f4       	brne	.+4      	; 0x17a <LCDByte+0xa>
	CLEAR_RS();
 176:	96 98       	cbi	0x12, 6	; 18
 178:	01 c0       	rjmp	.+2      	; 0x17c <LCDByte+0xc>
else
	SET_RS();
 17a:	96 9a       	sbi	0x12, 6	; 18
 17c:	82 e0       	ldi	r24, 0x02	; 2
 17e:	8a 95       	dec	r24
 180:	f1 f7       	brne	.-4      	; 0x17e <LCDByte+0xe>

_delay_us(0.500);		//tAS

SET_E();
 182:	97 9a       	sbi	0x12, 7	; 18

//Send high nibble

temp=(LCD_DATA_PORT & 0XF0)|(hn);
 184:	85 b3       	in	r24, 0x15	; 21
 186:	92 2f       	mov	r25, r18
 188:	92 95       	swap	r25
 18a:	9f 70       	andi	r25, 0x0F	; 15
 18c:	80 7f       	andi	r24, 0xF0	; 240
 18e:	98 2b       	or	r25, r24
LCD_DATA_PORT=temp;
 190:	95 bb       	out	0x15, r25	; 21
 192:	95 e0       	ldi	r25, 0x05	; 5
 194:	89 2f       	mov	r24, r25
 196:	8a 95       	dec	r24
 198:	f1 f7       	brne	.-4      	; 0x196 <LCDByte+0x26>

_delay_us(1);			//tEH

//Now data lines are stable pull E low for transmission

CLEAR_E();
 19a:	97 98       	cbi	0x12, 7	; 18
 19c:	89 2f       	mov	r24, r25
 19e:	8a 95       	dec	r24
 1a0:	f1 f7       	brne	.-4      	; 0x19e <LCDByte+0x2e>

_delay_us(1);

//Send the lower nibble
SET_E();
 1a2:	97 9a       	sbi	0x12, 7	; 18

temp=(LCD_DATA_PORT & 0XF0)|(ln);
 1a4:	85 b3       	in	r24, 0x15	; 21
 1a6:	2f 70       	andi	r18, 0x0F	; 15
 1a8:	80 7f       	andi	r24, 0xF0	; 240
 1aa:	82 2b       	or	r24, r18

LCD_DATA_PORT=temp;
 1ac:	85 bb       	out	0x15, r24	; 21
 1ae:	89 2f       	mov	r24, r25
 1b0:	8a 95       	dec	r24
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <LCDByte+0x40>

_delay_us(1);			//tEH

//SEND

CLEAR_E();
 1b4:	97 98       	cbi	0x12, 7	; 18
 1b6:	9a 95       	dec	r25
 1b8:	f1 f7       	brne	.-4      	; 0x1b6 <LCDByte+0x46>

_delay_us(1);			//tEL

LCDBusyLoop();
 1ba:	0e 94 8d 00 	call	0x11a	; 0x11a <LCDBusyLoop>
}
 1be:	08 95       	ret

000001c0 <InitLCD>:
	LCD_DATA_DDR|=0x0F;

}

void InitLCD(uint8_t style)
{
 1c0:	1f 93       	push	r17
 1c2:	18 2f       	mov	r17, r24
 1c4:	8c e2       	ldi	r24, 0x2C	; 44
 1c6:	91 e0       	ldi	r25, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1c8:	20 e9       	ldi	r18, 0x90	; 144
 1ca:	31 e0       	ldi	r19, 0x01	; 1
 1cc:	f9 01       	movw	r30, r18
 1ce:	31 97       	sbiw	r30, 0x01	; 1
 1d0:	f1 f7       	brne	.-4      	; 0x1ce <InitLCD+0xe>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1d4:	d9 f7       	brne	.-10     	; 0x1cc <InitLCD+0xc>
	
	//After power on Wait for LCD to Initialize
	_delay_ms(30);
	
	//Set IO Ports
	LCD_DATA_DDR|=(0x0F);
 1d6:	84 b3       	in	r24, 0x14	; 20
 1d8:	8f 60       	ori	r24, 0x0F	; 15
 1da:	84 bb       	out	0x14, r24	; 20
	LCD_E_DDR|=(1<<LCD_E_POS);
 1dc:	8f 9a       	sbi	0x11, 7	; 17
	LCD_RS_DDR|=(1<<LCD_RS_POS);
 1de:	8e 9a       	sbi	0x11, 6	; 17
	LCD_RW_DDR|=(1<<LCD_RW_POS);
 1e0:	8d 9a       	sbi	0x11, 5	; 17

	LCD_DATA_PORT&=0XF0;
 1e2:	85 b3       	in	r24, 0x15	; 21
 1e4:	80 7f       	andi	r24, 0xF0	; 240
 1e6:	85 bb       	out	0x15, r24	; 21
	CLEAR_E();
 1e8:	97 98       	cbi	0x12, 7	; 18
	CLEAR_RW();
 1ea:	95 98       	cbi	0x12, 5	; 18
	CLEAR_RS();
 1ec:	96 98       	cbi	0x12, 6	; 18
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	8a 95       	dec	r24
 1f2:	f1 f7       	brne	.-4      	; 0x1f0 <InitLCD+0x30>

	//Set 4-bit mode
	_delay_us(0.3);	//tAS

	SET_E();
 1f4:	97 9a       	sbi	0x12, 7	; 18
	LCD_DATA_PORT|=(0b00000010); //[B] To transfer 0b00100000 i was using LCD_DATA_PORT|=0b00100000
 1f6:	a9 9a       	sbi	0x15, 1	; 21
 1f8:	85 e0       	ldi	r24, 0x05	; 5
 1fa:	98 2f       	mov	r25, r24
 1fc:	9a 95       	dec	r25
 1fe:	f1 f7       	brne	.-4      	; 0x1fc <InitLCD+0x3c>
	_delay_us(1);
	CLEAR_E();
 200:	97 98       	cbi	0x12, 7	; 18
 202:	8a 95       	dec	r24
 204:	f1 f7       	brne	.-4      	; 0x202 <InitLCD+0x42>
	_delay_us(1);
	
	//Wait for LCD to execute the Functionset Command
	LCDBusyLoop();                                    //[B] Forgot this delay
 206:	0e 94 8d 00 	call	0x11a	; 0x11a <LCDBusyLoop>

	//Now the LCD is in 4-bit mode

	LCDCmd(0b00001100|style);	//Display On
 20a:	81 2f       	mov	r24, r17
 20c:	8c 60       	ori	r24, 0x0C	; 12
 20e:	60 e0       	ldi	r22, 0x00	; 0
 210:	0e 94 b8 00 	call	0x170	; 0x170 <LCDByte>
	LCDCmd(0b00101000);			//function set 4-bit,2 line 5x7 dot format
 214:	88 e2       	ldi	r24, 0x28	; 40
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	0e 94 b8 00 	call	0x170	; 0x170 <LCDByte>
}
 21c:	1f 91       	pop	r17
 21e:	08 95       	ret

00000220 <LCDWriteString>:
void LCDWriteString(const char *msg)
{
 220:	cf 93       	push	r28
 222:	df 93       	push	r29
 224:	ec 01       	movw	r28, r24
 226:	04 c0       	rjmp	.+8      	; 0x230 <LCDWriteString+0x10>


	*****************************************************************/
 while(*msg!='\0')
 {
	LCDData(*msg);
 228:	61 e0       	ldi	r22, 0x01	; 1
 22a:	0e 94 b8 00 	call	0x170	; 0x170 <LCDByte>
	msg++;
 22e:	21 96       	adiw	r28, 0x01	; 1
	Arguments:
	msg: a null terminated string to print


	*****************************************************************/
 while(*msg!='\0')
 230:	88 81       	ld	r24, Y
 232:	88 23       	and	r24, r24
 234:	c9 f7       	brne	.-14     	; 0x228 <LCDWriteString+0x8>
 {
	LCDData(*msg);
	msg++;
 }
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <LCDWriteInt>:

void LCDWriteInt(int val,unsigned int field_length)
{
 23c:	ef 92       	push	r14
 23e:	ff 92       	push	r15
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	df 93       	push	r29
 246:	cf 93       	push	r28
 248:	00 d0       	rcall	.+0      	; 0x24a <LCDWriteInt+0xe>
 24a:	00 d0       	rcall	.+0      	; 0x24c <LCDWriteInt+0x10>
 24c:	0f 92       	push	r0
 24e:	cd b7       	in	r28, 0x3d	; 61
 250:	de b7       	in	r29, 0x3e	; 62
 252:	9c 01       	movw	r18, r24
 254:	8b 01       	movw	r16, r22
	2)unsigned int field_length :total length of field in which the value is printed
	must be between 1-5 if it is -1 the field length is no of digits in the val

	****************************************************************/

	char str[5]={0,0,0,0,0};
 256:	fe 01       	movw	r30, r28
 258:	31 96       	adiw	r30, 0x01	; 1
 25a:	85 e0       	ldi	r24, 0x05	; 5
 25c:	df 01       	movw	r26, r30
 25e:	1d 92       	st	X+, r1
 260:	8a 95       	dec	r24
 262:	e9 f7       	brne	.-6      	; 0x25e <LCDWriteInt+0x22>
 264:	fe 01       	movw	r30, r28
 266:	35 96       	adiw	r30, 0x05	; 5
 268:	0d c0       	rjmp	.+26     	; 0x284 <LCDWriteInt+0x48>
	int i=4,j=0;
	while(val)
	{
	str[i]=val%10;
 26a:	c9 01       	movw	r24, r18
 26c:	6a e0       	ldi	r22, 0x0A	; 10
 26e:	70 e0       	ldi	r23, 0x00	; 0
 270:	0e 94 85 01 	call	0x30a	; 0x30a <__divmodhi4>
 274:	80 83       	st	Z, r24
	val=val/10;
 276:	c9 01       	movw	r24, r18
 278:	6a e0       	ldi	r22, 0x0A	; 10
 27a:	70 e0       	ldi	r23, 0x00	; 0
 27c:	0e 94 85 01 	call	0x30a	; 0x30a <__divmodhi4>
 280:	9b 01       	movw	r18, r22
 282:	31 97       	sbiw	r30, 0x01	; 1

	****************************************************************/

	char str[5]={0,0,0,0,0};
	int i=4,j=0;
	while(val)
 284:	21 15       	cp	r18, r1
 286:	31 05       	cpc	r19, r1
 288:	81 f7       	brne	.-32     	; 0x26a <LCDWriteInt+0x2e>
	{
	str[i]=val%10;
	val=val/10;
	i--;
	}
	if(field_length==-1)
 28a:	bf ef       	ldi	r27, 0xFF	; 255
 28c:	0f 3f       	cpi	r16, 0xFF	; 255
 28e:	1b 07       	cpc	r17, r27
 290:	79 f4       	brne	.+30     	; 0x2b0 <LCDWriteInt+0x74>
 292:	20 e0       	ldi	r18, 0x00	; 0
 294:	30 e0       	ldi	r19, 0x00	; 0
		while(str[j]==0) j++;
 296:	ae 01       	movw	r20, r28
 298:	4f 5f       	subi	r20, 0xFF	; 255
 29a:	5f 4f       	sbci	r21, 0xFF	; 255
 29c:	02 c0       	rjmp	.+4      	; 0x2a2 <LCDWriteInt+0x66>
 29e:	2f 5f       	subi	r18, 0xFF	; 255
 2a0:	3f 4f       	sbci	r19, 0xFF	; 255
 2a2:	fa 01       	movw	r30, r20
 2a4:	e2 0f       	add	r30, r18
 2a6:	f3 1f       	adc	r31, r19
 2a8:	80 81       	ld	r24, Z
 2aa:	88 23       	and	r24, r24
 2ac:	c1 f3       	breq	.-16     	; 0x29e <LCDWriteInt+0x62>
 2ae:	04 c0       	rjmp	.+8      	; 0x2b8 <LCDWriteInt+0x7c>
	else
		j=5-field_length;
 2b0:	25 e0       	ldi	r18, 0x05	; 5
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	20 1b       	sub	r18, r16
 2b6:	31 0b       	sbc	r19, r17
 2b8:	7e 01       	movw	r14, r28
 2ba:	08 94       	sec
 2bc:	e1 1c       	adc	r14, r1
 2be:	f1 1c       	adc	r15, r1
 2c0:	e2 0e       	add	r14, r18
 2c2:	f3 1e       	adc	r15, r19
 2c4:	89 01       	movw	r16, r18
 2c6:	09 c0       	rjmp	.+18     	; 0x2da <LCDWriteInt+0x9e>

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
	{
	LCDData(48+str[i]);
 2c8:	f7 01       	movw	r30, r14
 2ca:	81 91       	ld	r24, Z+
 2cc:	7f 01       	movw	r14, r30
 2ce:	80 5d       	subi	r24, 0xD0	; 208
 2d0:	61 e0       	ldi	r22, 0x01	; 1
 2d2:	0e 94 b8 00 	call	0x170	; 0x170 <LCDByte>
		while(str[j]==0) j++;
	else
		j=5-field_length;

	if(val<0) LCDData('-');
	for(i=j;i<5;i++)
 2d6:	0f 5f       	subi	r16, 0xFF	; 255
 2d8:	1f 4f       	sbci	r17, 0xFF	; 255
 2da:	05 30       	cpi	r16, 0x05	; 5
 2dc:	11 05       	cpc	r17, r1
 2de:	a4 f3       	brlt	.-24     	; 0x2c8 <LCDWriteInt+0x8c>
	{
	LCDData(48+str[i]);
	}
}
 2e0:	0f 90       	pop	r0
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	cf 91       	pop	r28
 2ec:	df 91       	pop	r29
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	ff 90       	pop	r15
 2f4:	ef 90       	pop	r14
 2f6:	08 95       	ret

000002f8 <LCDGotoXY>:
void LCDGotoXY(uint8_t x,uint8_t y)
{
 if(x<40)
 2f8:	88 32       	cpi	r24, 0x28	; 40
 2fa:	30 f4       	brcc	.+12     	; 0x308 <LCDGotoXY+0x10>
 {
  if(y) x|=0b01000000;
 2fc:	61 11       	cpse	r22, r1
 2fe:	80 64       	ori	r24, 0x40	; 64
  x|=0b10000000;
  LCDCmd(x);
 300:	80 68       	ori	r24, 0x80	; 128
 302:	60 e0       	ldi	r22, 0x00	; 0
 304:	0e 94 b8 00 	call	0x170	; 0x170 <LCDByte>
 308:	08 95       	ret

0000030a <__divmodhi4>:
 30a:	97 fb       	bst	r25, 7
 30c:	09 2e       	mov	r0, r25
 30e:	07 26       	eor	r0, r23
 310:	0a d0       	rcall	.+20     	; 0x326 <__divmodhi4_neg1>
 312:	77 fd       	sbrc	r23, 7
 314:	04 d0       	rcall	.+8      	; 0x31e <__divmodhi4_neg2>
 316:	0c d0       	rcall	.+24     	; 0x330 <__udivmodhi4>
 318:	06 d0       	rcall	.+12     	; 0x326 <__divmodhi4_neg1>
 31a:	00 20       	and	r0, r0
 31c:	1a f4       	brpl	.+6      	; 0x324 <__divmodhi4_exit>

0000031e <__divmodhi4_neg2>:
 31e:	70 95       	com	r23
 320:	61 95       	neg	r22
 322:	7f 4f       	sbci	r23, 0xFF	; 255

00000324 <__divmodhi4_exit>:
 324:	08 95       	ret

00000326 <__divmodhi4_neg1>:
 326:	f6 f7       	brtc	.-4      	; 0x324 <__divmodhi4_exit>
 328:	90 95       	com	r25
 32a:	81 95       	neg	r24
 32c:	9f 4f       	sbci	r25, 0xFF	; 255
 32e:	08 95       	ret

00000330 <__udivmodhi4>:
 330:	aa 1b       	sub	r26, r26
 332:	bb 1b       	sub	r27, r27
 334:	51 e1       	ldi	r21, 0x11	; 17
 336:	07 c0       	rjmp	.+14     	; 0x346 <__udivmodhi4_ep>

00000338 <__udivmodhi4_loop>:
 338:	aa 1f       	adc	r26, r26
 33a:	bb 1f       	adc	r27, r27
 33c:	a6 17       	cp	r26, r22
 33e:	b7 07       	cpc	r27, r23
 340:	10 f0       	brcs	.+4      	; 0x346 <__udivmodhi4_ep>
 342:	a6 1b       	sub	r26, r22
 344:	b7 0b       	sbc	r27, r23

00000346 <__udivmodhi4_ep>:
 346:	88 1f       	adc	r24, r24
 348:	99 1f       	adc	r25, r25
 34a:	5a 95       	dec	r21
 34c:	a9 f7       	brne	.-22     	; 0x338 <__udivmodhi4_loop>
 34e:	80 95       	com	r24
 350:	90 95       	com	r25
 352:	bc 01       	movw	r22, r24
 354:	cd 01       	movw	r24, r26
 356:	08 95       	ret

00000358 <_exit>:
 358:	f8 94       	cli

0000035a <__stop_program>:
 35a:	ff cf       	rjmp	.-2      	; 0x35a <__stop_program>
